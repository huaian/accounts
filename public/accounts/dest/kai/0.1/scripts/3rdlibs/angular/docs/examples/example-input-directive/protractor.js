define("3rdlibs/angular/docs/examples/example-input-directive/protractor",["dojo","dijit","dojox"],function(e,t,n){var i=element(by.exactBinding("user")),o=element(by.binding("myForm.userName.$valid")),a=element(by.binding("myForm.lastName.$valid")),l=element(by.binding("myForm.lastName.$error")),s=element(by.binding("myForm.$valid")),x=element(by.model("user.name")),m=element(by.model("user.last"));it("should initialize to model",function(){expect(i.getText()).toContain('{"name":"guest","last":"visitor"}'),expect(o.getText()).toContain("true"),expect(s.getText()).toContain("true")}),it("should be invalid if empty when required",function(){x.clear(),x.sendKeys(""),expect(i.getText()).toContain('{"last":"visitor"}'),expect(o.getText()).toContain("false"),expect(s.getText()).toContain("false")}),it("should be valid if empty when min length is set",function(){m.clear(),m.sendKeys(""),expect(i.getText()).toContain('{"name":"guest","last":""}'),expect(a.getText()).toContain("true"),expect(s.getText()).toContain("true")}),it("should be invalid if less than required min length",function(){m.clear(),m.sendKeys("xx"),expect(i.getText()).toContain('{"name":"guest"}'),expect(a.getText()).toContain("false"),expect(l.getText()).toContain("minlength"),expect(s.getText()).toContain("false")}),it("should be invalid if longer than max length",function(){m.clear(),m.sendKeys("some ridiculously long name"),expect(i.getText()).toContain('{"name":"guest"}'),expect(a.getText()).toContain("false"),expect(l.getText()).toContain("maxlength"),expect(s.getText()).toContain("false")})});