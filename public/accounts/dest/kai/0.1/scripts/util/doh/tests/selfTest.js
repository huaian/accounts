define("util/doh/tests/selfTest",["doh/runner"],function(e){function t(t,r){return function(){r&&e.assertTrue(F.name==r),t&&(e.assertTrue(v+1==t),v=t)}}e.register("doh/selftest/lastTest",function(e){e.assertTrue(!0)});var r={a:0,b:1,c:!0,d:!1,e:{},f:{a:"x"},g:"",h:"hellp",i:null},s={a:0,b:1,c:!0,d:!1,e:{},f:{a:"x"},g:"",h:"hellp",i:null},a={a:1,b:1,c:!0,d:!1,e:{},f:{a:"x"},g:"",h:"hellp",i:null},l={a:0,b:2,c:!0,d:!1,e:{},f:{a:"x"},g:"",h:"hellp",i:null},u={a:0,b:1,c:!1,d:!1,e:{},f:{a:"x"},g:"",h:"hellp",i:null},o={a:0,b:1,c:!0,d:!0,e:{},f:{a:"x"},g:"",h:"hellp",i:null},n={a:0,b:1,c:!0,d:!1,e:{a:"x"},f:{a:"x"},g:"",h:"hellp",i:null},i={a:0,b:1,c:!0,d:!1,e:{},f:{a:"y"},g:"",h:"hellp",i:null},f={a:0,b:1,c:!0,d:!1,e:{},f:{b:"x"},g:"",h:"hellp",i:null},p={a:0,b:1,c:!0,d:!1,e:{},f:{},g:"x",h:"hellp",i:null},d={a:0,b:1,c:!0,d:!1,e:{},f:{},g:"",h:"hello",i:null},h={a:0,b:1,c:!0,d:!1,e:{},f:{},g:"",h:"hellp",i:0},E=[0,1,!0,!1,{},{a:"x"},"","hello",null],T=[0,1,!0,!1,{},{a:"x"},"","hello",null],m=[1,1,!0,!1,{},{a:"x"},"","hellp",null],q=[0,2,!0,!1,{},{a:"x"},"","hellp",null],c=[0,1,!1,!1,{},{a:"x"},"","hellp",null],g=[0,1,!0,!0,{},{a:"x"},"","hellp",null],y=[0,1,!0,!1,{a:"x"},{a:"x"},"","hellp",null],x=[0,1,!0,!1,{},{a:"y"},"","hellp",null],N=[0,1,!0,!1,{},{b:"x"},"","hellp",null],G=[0,1,!0,!1,{},{},"x","hellp",null],D=[0,1,!0,!1,{},{},"","hello",null],b=[0,1,!0,!1,{},{},"","hellp",0];e.register("doh/asserts/pass",function(e){function t(t,r){e[t].apply(e,r)}t("assertTrue",[!0]),t("assertTrue",[{}]),t("assertTrue",[1]),t("assertFalse",[!1]),t("assertFalse",[0]),t("assertFalse",[null]),t("assertFalse",[void 0]),t("assertFalse",[void 0]),t("assertEqual",[[],[]]),t("assertEqual",[[1],[1]]),t("assertEqual",[[1,2],[1,2]]),t("assertEqual",[[1,2,3],[1,2,3]]),t("assertEqual",[r,r]),t("assertEqual",[r,s]),t("assertEqual",[E,T]),t("assertNotEqual",[r,a]),t("assertNotEqual",[r,l]),t("assertNotEqual",[r,u]),t("assertNotEqual",[r,o]),t("assertNotEqual",[r,n]),t("assertNotEqual",[r,i]),t("assertNotEqual",[r,f]),t("assertNotEqual",[r,p]),t("assertNotEqual",[r,d]),t("assertNotEqual",[r,h]),t("assertNotEqual",[E,m]),t("assertNotEqual",[E,q]),t("assertNotEqual",[E,c]),t("assertNotEqual",[E,g]),t("assertNotEqual",[E,y]),t("assertNotEqual",[E,x]),t("assertNotEqual",[E,N]),t("assertNotEqual",[E,G]),t("assertNotEqual",[E,D]),t("assertNotEqual",[E,b])}),e.register("doh/asserts/fail",function(t){function F(r,s){try{t[r].apply(t,s)}catch(a){return void t.assertTrue(!0)}throw new e._AssertFailure("failed: "+r)}F("assertFalse",[!0]),F("assertFalse",[{}]),F("assertFalse",[1]),F("assertTrue",[!1]),F("assertTrue",[0]),F("assertTrue",[null]),F("assertTrue",[void 0]),F("assertTrue",[void 0]),F("assertNotEqual",[[],[]]),F("assertNotEqual",[[1],[1]]),F("assertNotEqual",[[1,2],[1,2]]),F("assertNotEqual",[[1,2,3],[1,2,3]]),F("assertNotEqual",[r,r]),F("assertNotEqual",[r,s]),F("assertNotEqual",[E,T]),F("assertEqual",[r,a]),F("assertEqual",[r,l]),F("assertEqual",[r,u]),F("assertEqual",[r,o]),F("assertEqual",[r,n]),F("assertEqual",[r,i]),F("assertEqual",[r,f]),F("assertEqual",[r,p]),F("assertEqual",[r,d]),F("assertEqual",[r,h]),F("assertEqual",[E,m]),F("assertEqual",[E,q]),F("assertEqual",[E,c]),F("assertEqual",[E,g]),F("assertEqual",[E,y]),F("assertEqual",[E,x]),F("assertEqual",[E,N]),F("assertEqual",[E,G]),F("assertEqual",[E,D]),F("assertEqual",[E,b])});var F;dojo.connect(e,"_testStarted",function(e,t){F=t});var v,w=e._setupGroupForRun;e._setupGroupForRun=function(t){v=0,w.call(e,t)},e.register("myGroup2-1",t(2),t(1),t(3)),e.register("myGroup2-2",t(2),t(1)),e.register("myGroup2-4",t(1)),dohSelfTestLog5=t(2),dohSelfTestLog6=t(2),dohSelfTestLog7=t(1),dohSelfTestLog8=t(1),e.register("myGroup2-5","dohSelfTestLog5();",t(1),t(3)),e.register("myGroup2-6","dohSelfTestLog6();",t(1)),e.register("myGroup2-8","dohSelfTestLog8();"),e.register("myGroup2-9",[t(2),t(3)],t(1),t(4)),e.register("myGroup2-10",[t(2),t(3)],t(1)),e.register("myGroup2-12",[t(1),t(2)]),e.register("myGroup2-13",{t1:t(0,"t1"),t2:t(0,"t2")},t(1),t(2)),e.register("myGroup2-14",{t3:t(0,"t3"),t4:t(0,"t4")},t(1)),e.register("myGroup2-16",{t7:t(0,"t7"),t8:t(0,"t8")}),e.register("myGroup2-17",{name:"t9",runTest:t(2,"t9")},t(1),t(3)),e.register("myGroup2-18",{name:"t10",runTest:t(2,"t10")},t(1)),e.register("myGroup2-20",{name:"t12",runTest:t(1,"t12")}),e.register("myGroup2-21",{name:"tx",runTest:t(3),setUp:t(2)},t(1),t(4)),e.register("myGroup2-22",{name:"tx",runTest:t(3),setUp:t(2)},t(1)),e.register("myGroup2-24",{name:"tx",runTest:t(2),setUp:t(1)}),e.register("myGroup2-25",{name:"tx",runTest:t(2),tearDown:t(3)},t(1),t(4)),e.register("myGroup2-26",{name:"tx",runTest:t(2),tearDown:t(3)},t(1)),e.register("myGroup2-28",{name:"tx",runTest:t(1),tearDown:t(2)}),e.register("myGroup2-29",{name:"tx",runTest:t(3),setUp:t(2),tearDown:t(4)},t(1),t(5)),e.register("myGroup2-30",{name:"tx",runTest:t(3),setUp:t(2),tearDown:t(4)},t(1)),e.register("myGroup2-32",{name:"tx",runTest:t(2),setUp:t(1),tearDown:t(3)}),e.registerTestType("dohSelfTest",function(e,t){}),e.register("doh/async",[{name:"doh.Deferred success",runTest:function(t){var r=new e.Deferred;return setTimeout(r.getTestCallback(function(){t.assertTrue(!0),t.assertFalse(!1)}),50),r}},{name:"dojo.Deferred success",runTest:function(e){var t=new dojo.Deferred;return setTimeout(function(){t.resolve(!0)},50),t}},{name:"doh.Deferred failure--SHOULD FAIL",runTest:function(t){var r=new e.Deferred;return setTimeout(r.getTestCallback(function(){t.assertTrue(!1)}),50),r}},{name:"dojo.Deferred failure--SHOULD FAIL",runTest:function(e){var t=new dojo.Deferred;return setTimeout(function(){t.reject(new Error("hrm..."))},50),t}},{name:"doh.Deferred timeout failure--SHOULD FAIL",timeout:50,runTest:function(t){var r=new e.Deferred;return setTimeout(r.getTestCallback(function(){}),100),r}},{name:"dojo.Deferred timeout failure--SHOULD FAIL",timeout:50,runTest:function(e){var t=new dojo.Deferred;return setTimeout(function(){t.callback(!0)},100),t}}]),e.register("doh/selftest/lastTest",function(e){e.assertTrue(!0)})});