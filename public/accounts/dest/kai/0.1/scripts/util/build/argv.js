require({cache:{"url:util/build/help.txt":"NAME\n     The Dojo Builder - Read, process, and write a set of resources as instructed by a profile.\n\nDESCRIPTION\n     Discover and process a set of resources with an ordered synchronized set of transforms.\n\n     See http://dojotoolkit.org/reference-guide/build/index.html for reference documentation.\n     \n     See http://dojotoolkit.org/reference-guide/build/qref.html for a quick reference manual.\n\n     Typically this program is executed with the convience wrapper /util/buildscripts/build.bat (Window) or\n     /util/buildscripts/build.sh (all other environments); it may also be executed explicitly.\n\n     Usage with the build script on non-windows:\n     path/to/util/buildscripts/build.sh [options]\n     \n     Usage with the build script on windows:\n     IMPORTANT: the util/buildscripts directory must be the current working directory\n     build.bat [options]\n\n     Explicit usage with node.js:\n     node path/to/dojo/dojo.js load=build [options] \n     \n     Explicit usage with java:\n     java -Xms256m -Xmx256m -jar path/to/util/shrinksafe/js.jar path/to/dojo/dojo.js baseUrl=path/to/dojo load=build [options]\n     \n     IMPORTANT:\n     This program assumes the default directory structure provided with the standard dojo source release.\n     \n     IMPORTANT:\n     When using v1.6- profiles, this program assumes the current working directory is utils/buildscripts.\n\nOPTIONS\n     -p <filename>\n     --profile <filename>      read profile for file\n     \n     -p <profile>\n     --profile <profile>       read profile from profile in util/buildscripts/profiles\n     \n     --package <path>          read profile from package.json located in the directory path\n     \n     --require <filename>\n     --dojoConfig              read profile from loader configuration \n     \n     --htmlFiles <file-list>   deduce profile from HTML file(s); file-list is a comma-separated list of filenames\n     \n     --htmlDir <path>          deduce profile from all HTML files in directory at path\n     \n     --check-args              print computed raw command line input, including raw profiles, then terminate\n     \n     --check                   print computed profile, then terminate\n     \n     --check-discovery         print all discovered resources, then terminate\n     \n     --debug-check             print computed profile, including internal structures\n     \n     -r\n     --release                 process the build control script(s) and/or profile(s) and transform sources into a release\n     \n     --releaseDir <path>       base directory for build output\n     \n     --releaseName <string>    path segment to append to releaseDir that gives base directory for build output\n\n     --layerOptimize <arg>     process all layer resources in order to minimize resource size; arg as follows:\n                                   comments             => remove comments with ShrinkSafe\n                                   comments.keeplines   => as above, but don't remove newlines\n                                   shrinksafe           => minimize with ShrinkSafe\n                                   shrinksafe.keeplines => as above, but don't remove newlines\n                                   closure              => minimize with the Google Closure compiler\n                                   closure.keeplines    => as above, but don't remove newlines\n                                   uglify               => minimize with Uglify\n                                   uglify.keeplines     => as above, but don't remove newlines\n                               (note: all args are case-insensitive)\n\n     --optimize <arg>          analogous to --layerOptimize, but applied to non-layer resources\n\n     --useSourceMaps <arg>     create source maps when the Google Closure compiler is used; arg as follows:\n                                   true  => create source maps (default)\n                                   false => don't create source maps\n\n     --copyTests <arg>         copy test files and the DOH package; arg as follows:\n                                   false => don't copy tests\n                                   true  => copy test resources, but don't apply any transforms\n                                   build => copy and build tests resources just as if they were normal resources\n\n     --mini                    Ignore resources tagged as not mini (e.g. tests, demos dijit/bench, etc.)\n     \n     -v                        print the program's version number\n     \n     --help                    this help message\n     \n     Scalar profile property values may also be specified as options with the syntax\n     \n          --<profile-property-name> <value>\n     \n"}}),define("util/build/argv",["require","dojo/json","dojo/has","./fs","./fileUtils","./process","commandLineArgs","./stringify","./version","./messages","./v1xProfiles","dojo/text!./help.txt"],function(require,json,has,fs,fileUtils,process,argv,stringify,version,messages,v1xProfiles,help){eval(require.scopeify("./fileUtils"));for(var result={profiles:[]},cwd=process.cwd(),dojoPath=computePath(require.toUrl("dojo/package.json").match(/(.+)\/package\.json$/)[1],cwd),utilBuildscriptsPath=compactPath(catPath(dojoPath,"/../util/buildscripts")),printVersion=0,printHelp=0,checkArgs=0,illegalArgumentValue=function(e,i){messages.log("inputIllegalCommandlineArg",["switch",e,"position",i])},evalScriptArg=function(e){return"true"==e?!0:"false"==e?!1:"null"==e?null:isNaN(e)?e+"":Number(e)},readProfile=function(e,i){var r=getFilepath(i);if(!fileExists(i))return messages.log("inputFileDoesNotExist",[e,i]),0;try{var s=fs.readFileSync(i,"utf8")}catch(t){return messages.log("inputFailedReadfile",[e,i,"error",t]),0}"profileFile"==e&&(messages.log("inputProfileFileDeprecated"),e="profile");var a,o,l=function(e){var i=function(e,i){return e?e=computePath(e,i):"undefined"==typeof e&&(e=i),e};e.basePath=i(e.basePath,r),e.build&&e.build.basePath&&(e.build.basePath=i(e.build.basePath,r))};try{return"require"==e?(a=new Function("var __result, require= function(config){__result=config;};"+s+"; return __result || require;"),o=a(),l(o)):"dojoConfig"==e?(a=new Function(s+"; return dojoConfig;"),o=a(),l(o)):"profile"==e&&(a=new Function("selfPath","logger","profile","dependencies",s+"; return {profile:profile, dependencies:dependencies}"),o=a(r,messages,0,0),o.profile?(o=o.profile,l(o)):o=v1xProfiles.processProfile(o.dependencies,dojoPath,utilBuildscriptsPath,r)),o.selfFilename=i,messages.log("pacify","processing "+e+" resource "+i),o}catch(t){return messages.log("inputFailedToEvalProfile",[e,i,"error",t]),0}},processHtmlDir=function(e){if(fileUtils.dirExists(e)){var i=[];return fs.readdirSync(e).forEach(function(r){/\.html$/.test(r)&&i.push(e+"/"+r)}),i.length?v1xProfiles.processHtmlFiles(i,dojoPath,utilBuildscriptsPath):(messages.log("inputHTMLDirNoFiles",["directory",e]),0)}return messages.log("inputHTMLDirDoesNotExist",["directory",e]),0},processHtmlFiles=function(e){var i=e.split(",").filter(function(e){return fileUtils.fileExists(e)?1:(messages.log("inputHTMLFileDoesNotExist",["filename",e]),0)});return i.length?v1xProfiles.processHtmlFiles(i,dojoPath,utilBuildscriptsPath):0},readPackageJson=function(e,i){if(fileUtils.fileExists(e))try{var r=json.parse(fs.readFileSync(e,"utf8"));return r.selfFilename=e,r}catch(s){messages.log("inputMalformedPackageJson",["filename",e])}else messages.log(i,["filename",e]);return 0},processPackageJson=function(e){var i=catPath(e,"package.json"),r=readPackageJson(i,"inputMissingPackageJson");r&&(r.selfFilename=i,result.profiles.push({packages:[{name:r.progName||r.name,packageJson:r}]}))},readCopyrightOrBuildNotice=function(e,i){fileExists(e)||messages.log("inputFileDoesNotExist",[i,e]);try{var r="copyrightFile"==i?"copyright":"buildNotice";result[r]=fs.readFileSync(e,"utf8")}catch(s){messages.log("inputFailedReadfile",[i,e,"error",s])}},normalizeSwitch={"-p":"profile","--profile":"profile","--profileFile":"profileFile",p:"profile",profile:"profile",profileFile:"profileFile","--package":"package","package":"package","--require":"require",require:"require","--dojoConfig":"dojoConfig",dojoConfig:"dojoConfig","--htmlDir":"htmlDir",htmlDir:"htmlDir","--htmlFiles":"htmlFiles",htmlFiles:"htmlFiles","--copyrightFile":"copyrightFile",copyrightFile:"copyrightFile","--buildNoticeFile":"buildNoticeFile",buildNoticeFile:"buildNoticeFile"},arg,processVector=[],i=1,end=argv.length;end>i;)switch(arg=argv[i++]){case"-p":case"--profile":end>i?processVector.push([normalizeSwitch[arg],argv[i++],cwd]):illegalArgumentValue(arg,i);break;case"--profileFile":case"--require":case"--dojoConfig":case"--htmlDir":case"--htmlFiles":case"--copyrightFile":case"--buildNoticeFile":end>i?processVector.push([normalizeSwitch[arg],getAbsolutePath(argv[i++],cwd)]):illegalArgumentValue(arg,i);break;case"--package":end>i?argv[i++].split(",").forEach(function(e){processVector.push(["package",getAbsolutePath(e,cwd)])}):illegalArgumentValue(arg,i);break;case"--writeProfile":end>i?result.writeProfile=getAbsolutePath(argv[i++],cwd):illegalArgumentValue(arg,i);break;case"--check":result.check=!0;break;case"--check-args":checkArgs=!0;break;case"--check-discovery":result.checkDiscovery=!0,result.release=!0;break;case"--debug-check":result.debugCheck=!0;break;case"--clean":result.clean=!0;break;case"-r":case"--release":result.release=!0;break;case"--help":printHelp=!0;break;case"-v":printVersion=function(){messages.log("pacify",version+"")};break;case"--unit-test":end>i?result.unitTest=argv[i++]:illegalArgumentValue("unit-test",i);break;case"--unit-test-param":end>i?(result.unitTestParam=result.unitTestParam||[],result.unitTestParam.push(evalScriptArg(argv[i++]))):illegalArgumentValue("unit-test",i);break;default:var match=arg.match(/^\-\-?(.+)/);if(match&&end>i)end>=i?result[match[1]]=evalScriptArg(argv[i++]):illegalArgumentValue(arg,i);else{var parts=arg.split("=");if(2==parts.length)switch(parts[0]){case"p":case"profile":processVector.push([normalizeSwitch[parts[0]],parts[1]]);break;case"package":parts[1].split(",").forEach(function(e){processVector.push(["package",getAbsolutePath(e,cwd)])});break;case"profileFile":case"require":case"dojoConfig":case"htmlDir":case"htmlFiles":case"copyrightFile":case"buildNoticeFile":processVector.push([normalizeSwitch[parts[0]],getAbsolutePath(parts[1],cwd)]);break;default:result[parts[0]]=evalScriptArg(parts[1])}else illegalArgumentValue(arg,i)}}var processingHtmlFiles=processVector.some(function(e){return"htmlFiles"==e[0]||"htmlDir"==e[0]});if(processingHtmlFiles)for(i=0;i<processVector.length;i++)if("profileFile"==processVector[i][0]&&!fileExists(processVector[i][1])){messages.log("outputToProfileFileDeprecated"),result.writeProfile=processVector[i][1],processVector.splice(i,1);break}if(processVector.forEach(function(e){var i;switch(e[0]){case"profile":var r,s=getFiletype(e[1],!0);if(""==s){if(r=getAbsolutePath(e[1]+".profile.js",cwd),fileExists(r)||/\//.test(e[1])||(r=catPath(utilBuildscriptsPath,"profiles/"+e[1]+".profile.js")),!fileExists(r)){messages.log("inputFileDoesNotExist",["filename",r]);break}}else{if(/^(html|htm)$/.test(s))return void messages.log("inputProcessingHtmlFileNotImplemented",["profile",r]);r=getAbsolutePath(e[1],cwd)}i=readProfile(e[0],r);break;case"htmlDir":i=processHtmlDir(e[1]);break;case"htmlFiles":i=processHtmlFiles(e[1]);break;case"package":i=processPackageJson(e[1]);break;case"copyrightFile":case"buildNoticeFile":i=readCopyrightOrBuildNotice(e[1],e[0]);break;default:i=readProfile(e[0],e[1])}i&&result.profiles.push(i)}),(printHelp||printVersion)&&2==argv.length||printHelp&&printVersion&&3==argv.length)return printHelp&&(messages.log("pacify",help),messages.log("pacify",version+"")),printVersion&&printVersion(),process.exit(0),0;if(printVersion&&printVersion(),checkArgs)return messages.log("pacify",stringify(result)),process.exit(0),0;if(messages.getErrorCount())return messages.log("pacify","errors on command line; terminating application."),process.exit(-1),0;if(!result.profiles.length)return messages.log("pacify","no profile provided; use the option --help for help"),process.exit(-1),0;if("argv"==result.unitTest){var testId=result.unitTestParam[0],writingExpected=0>testId;writingExpected&&(testId=-testId),result.unitTestParam=testId;var expectedFilename=compactPath(utilBuildscriptsPath+"/../build/tests/argvTestsExpected.js"),expected=json.parse(fs.readFileSync(expectedFilename,"utf8")),pathNormalize=utilBuildscriptsPath.match(/(.*)\/util\/buildscripts/)[1],testResult=stringify(result).replace(RegExp(pathNormalize,"g"),"~"),passed=1;writingExpected?(debug(testResult),expected[result.unitTestParam]=testResult,fs.writeFileSync(expectedFilename,json.stringify(expected),"utf8")):passed=testResult==expected[result.unitTestParam],process.exit(passed?0:-1)}return{args:result,readPackageJson:readPackageJson,readProfile:readProfile}});